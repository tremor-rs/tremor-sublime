%YAML 1.2
---
name: Tremor
file_extensions:
  - tremor
  - trickle
  - troy
  - json
scope: source.tremor
escape:
  - match: \\.
    scope: invalid.illegal.unrecognized-escape.tremor
contexts:
  prototype:
    - include: comments
  main:
    - include: value
  value:
    - include: shebang
    - include: extractor
    - include: keyword
    - include: constant
    - include: identifier
    - include: number
    - include: heredoc
    - include: string
    - include: array
    - include: record
    - include: operator
    - include: punctuation
    - include: bitsyntax

  shebang:
    - match: ^#!.*$
      scope: comment.line.shebang.tremor
      captures:
        '0': punctuation.definition.comment.tremor

  keyword:
    - match: \b(?:event|state|select|create|define|deploy|operator|script|connector|pipeline|flow|config|links|connect|to|from|into|with|group|by|args|window|stream|tumbling|sliding|where|having|set|each|emit|drop|const|let|for|match|of|case|when|default|end|patch|insert|update|erase|move|copy|merge|fn|intrinsic|recur|use|as|mod)\b
      scope: keyword.control.tremor
      captures:
        '0': { name: keywords }

  constant:
    - match: \b(true|false|null)\b
      scope: constant.language.tremor
      captures:
        '0': { name: constant }
    - match: \b(in|out|err)\b
      scope: constant.language.tremor
      captures:
        '0': { name: constant }
    - match: \b(?:args|group|win|event|state|config)\b
      scope: constant.language.tremor
      captures:
        '0': { name: constant }
  
  number:
    # handles integer and decimal numbers
    - match: -?(?:0|[1-9]\d*)(?:(?:(\.)\d+)(?:[eE][-+]?\d+)?|(?:[eE][-+]?\d+))
      scope: constant.numeric.tremor
      captures:
        0: number
    - match: -?(?:0|[1-9]\d*)
      scope: constant.numeric.tremor
      captures:
        0: number

  identifier: 
    - match: \b([a-zA-Z_][a-zA-Z0-9_]*)
      scope: variable.identifier
      captures:
        '0': { name: identifier }

  array:
    - match: '\['
      scope: punctuation.section.sequence.begin.tremor
      push:
        - meta_scope: meta.sequence.tremor
        - match: '\]'
          scope: punctuation.section.sequence.end.tremor
          pop: true
        - include: value
        - match: ","
          scope: punctuation.separator.sequence.tremor
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-sequence-separator.tremor

  comments:
    - include: mod-comments
    - include: doc-comments
    - include: line-comments

  mod-comments:
    - match: '^\s*(###)\s(.*)$'
      scope: comment.block.triple-hash.tremor
      captures:
        '0': punctuation.definition.comment.tremor 
        '1': comment.definition.documentation.tremor

  doc-comments:
    - match: '^\s*(##)\s(.*)$'
      scope: comment.block.double-hash.tremor
      captures:
        '0': punctuation.definition.comment.tremor 
        '1': comment.definition.documentation.tremor


  line-comments:
    - match: (##) .*$\n?
      scope: comment.line.double-hash.tremor
      captures:
        1: punctuation.definition.comment.tremor 
    - match: (#).*$\n?
      scope: comment.line.single-hash.tremor
      captures:
        1: punctuation.definition.comment.tremor

  record:
    - match: '\{'
      scope: punctuation.section.mapping.begin.tremor
      push:
        - meta_scope: meta.mapping.tremor
        - match: '\}'
          scope: punctuation.section.mapping.end.tremor
          pop: true
        - match: '"'
          scope: punctuation.definition.string.begin.tremor
          push:
            - clear_scopes: 1
            - meta_scope: meta.mapping.key.tremor string.quoted.double.tremor
            - meta_include_prototype: false
            - include: inside-string
        - match: ":"
          scope: punctuation.separator.mapping.key-value.tremor
          push:
            - match: ',|\s?(?=\})'
              scope: invalid.illegal.expected-mapping-value.tremor
              pop: true
            - match: (?=\S)
              set:
                - clear_scopes: 1
                - meta_scope: meta.mapping.value.tremor
                - include: value
                - match: ''
                  set:
                    - match: ','
                      scope: punctuation.separator.mapping.pair.tremor
                      pop: true
                    - match: \s*(?=\})
                      pop: true
                    - match: \s(?!/[/*])(?=[^\s,])|[^\s,]
                      scope: invalid.illegal.expected-mapping-separator.tremor
                      pop: true
        - match: '[^\s\}]'
          scope: invalid.illegal.expected-mapping-key.tremor

  heredoc:
    - match: '"""'
      scope: punctuation.documentation.heredoc.begin.tremor
      push:
        - meta_scope: heredoc.quoted.triple.tremor
        - meta_include_prototype: false
        - match: '(\#\{)'
          scope: variable.other.heredoc.string.interpolated.begin.tremor
          push:
            - meta_scope: source.tremor
            - include: 'main'
            - match: '\}'
              scope: variable.other.heredoc.string.interpolated.end.tremor
              pop: true 
        - match: '"""'
          scope: punctuation.definition.heredoc.end.tremor
          pop: true
        - include: string-escape

  string:
    - match: '"'
      scope: punctuation.definition.string.begin.tremor
      push: inside-string

  inside-string:
    - meta_scope: string.quoted.double.tremor
    - meta_include_prototype: false
    - match: '(\#)\{'
      scope: variable.other.string.interpolated.element.begin.tremor
      push:
        - meta_scope: source.tremor
        - match: '\}'
          scope: variable.other.string.interpolated.element.end.tremor
          pop: true
        - include: 'main'
    - match: '"'
      scope: punctuation.definition.string.end.tremor
      pop: true
    - include: string-escape
    - match: $\n?
      scope: invalid.illegal.unclosed-string.tremor
      pop: true

  string-escape:
    - match: |-
        (?x:                # turn on extended mode
          \\                # a literal backslash
          (?:               # ...followed by...
            ["\\/bfnrt]     # one of these characters
            |               # ...or...
            u               # a u
            [0-9a-fA-F]{4}  # and four hex digits
          )
        )
      scope: constant.character.escape.tremor
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.tremor

  operator:
    - match: '\b(\+|-|\*|/|%|==|!=|<=|>=|<|>|&&|\|\||\^|!|~|&|\||\?|:|,)\b'
      scope: keyword.operator.tremor

  punctuation:
    - match: '\b(\.|\(|\)|\[|\]|=|@|;|\{|\})\b'
      scope: punctuation.tremor

  extractor:
    - match: '(\b[a-z_]\w*)(\|)'
      captures:
        1: identifier.other.extractor
        2: string.other.extractor
      push: inside-extractor
    - match: '\|\|'
      scope: constant.other.extractor
    - match: '\|'
      scope: keyword.other.extractor

  inside-extractor:
    - match: '\|'
      scope: string.other.extractor
      pop: true
    - match: '([^\|]+)?'
      scope: string.other.extractor

  bitsyntax:
    - match: '(<<|>>)'
      captures:
        0: punctuation.other.bitsyntax
